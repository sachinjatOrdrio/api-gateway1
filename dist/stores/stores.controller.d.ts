import { CreateStoreDto } from './dto/create-store.dto';
import { UpdateStoreDto } from './dto/update-store.dto';
import { StoresRpcService } from './stores.rpc.service';
import { Response } from 'express';
import { CreateMemberDto } from './dto/create-member.dto';
import { UpdateMemberDto } from './dto/update-member.dto';
import { CreateCustomerDto } from './dto/create-customer.dto';
import { UpdateBranchDto } from './dto/update-branch.dto';
import { CreateBranchDto } from './dto/create-branch.dto';
import { CreateProductDto } from './dto/create-product.dto';
export declare class StoresController {
    private readonly storesRpcService;
    constructor(storesRpcService: StoresRpcService);
    getProducts(req: any, res: Response): Promise<void>;
    getBranches(req: any, res: Response): Promise<void>;
    getMembers(req: any, res: Response): Promise<void>;
    getCustomers(req: any, res: Response): Promise<void>;
    create(createStoreDto: CreateStoreDto, req: any, res: Response): Promise<void>;
    findOne(id: string, req: any, res: Response): Promise<void>;
    update(id: string, updateStoreDto: UpdateStoreDto, req: any, res: Response): Promise<void>;
    remove(id: string, req: any, res: Response): Promise<void>;
    addMember(createMemberDto: CreateMemberDto, req: any, res: Response): Promise<void>;
    getMember(uid: string, req: any, res: Response): Promise<void>;
    updateMember(id: string, updateMemberDto: UpdateMemberDto, req: any, res: Response): Promise<void>;
    removeMember(id: string, req: any, res: Response): Promise<void>;
    addCustomer(createCustomerDto: CreateCustomerDto, req: any, res: Response): Promise<void>;
    getCustomer(id: string, req: any, res: Response): Promise<void>;
    updateCustomer(id: string, updateCustomerDto: CreateCustomerDto, req: any, res: Response): Promise<void>;
    removeCustomer(id: string, req: any, res: Response): Promise<void>;
    findAll(req: any, res: Response): Promise<void>;
    addBranch(createBranchDto: CreateBranchDto, req: any, res: Response): Promise<void>;
    updateBranch(id: string, updateBranchDto: UpdateBranchDto, req: any, res: Response): Promise<void>;
    removeBranch(id: string, req: any, res: Response): Promise<void>;
    getBranch(id: string, req: any, res: Response): Promise<void>;
    addProduct(createProductDto: CreateProductDto, req: any, res: Response): Promise<void>;
    updateProduct(id: string, updateProductDto: CreateProductDto, req: any, res: Response): Promise<void>;
    removeProduct(id: string, req: any, res: Response): Promise<void>;
}
